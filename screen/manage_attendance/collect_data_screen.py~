import cv2
import numpy as np
import insightface
from insightface.app import FaceAnalysis
import os
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import math

# Kh·ªüi t·∫°o th∆∞ m·ª•c l∆∞u embeddings
embedding_dir = "embeddings/"
if not os.path.exists(embedding_dir):
    os.makedirs(embedding_dir)

# Kh·ªüi t·∫°o b·ªô nh·∫≠n di·ªán khu√¥n m·∫∑t InsightFace
app = FaceAnalysis(allowed_modules=['detection', 'recognition'])
app.prepare(ctx_id=0, det_size=(640, 640))

# Kh·ªüi t·∫°o webcam
cap = cv2.VideoCapture(0)

# === Kh·ªüi t·∫°o c·ª≠a s·ªï Tkinter ===
root = tk.Tk()
root.title("Face Authentication")
root.geometry("1000x650")
root.configure(bg="#B3E5FC")  # M√†u n·ªÅn xanh bi·ªÉn nh·∫°t

# Bi·∫øn l∆∞u ID sinh vi√™n
student_id = None

# === N√öT BACK ===
btn_back = tk.Button(root, text="Back", font=("Arial", 12, "bold"), bg="#4699A6", fg="white",
                     width=10, height=2, borderwidth=0, command=root.quit)
btn_back.place(x=30, y=20)

# === TI√äU ƒê·ªÄ ===
header_label = tk.Label(root, text="Face Authentication", font=("Arial", 24, "bold"),
                        bg="#B3E5FC", fg="black")
header_label.place(relx=0.5, y=40, anchor="center")

# === KHUNG HI·ªÇN TH·ªä CAMERA ===
video_frame = tk.Frame(root, width=640, height=400, bg="white", relief="solid", borderwidth=2, highlightbackground="#8A2BE2", highlightthickness=3)
video_frame.place(x=60, y=100)

video_label = tk.Label(video_frame, text="Khung hi·ªÉn th·ªã camera", font=("Arial", 18, "bold"), bg="white")
video_label.place(relx=0.5, rely=0.5, anchor="center")

# === √î NH·∫¨P MSSV ===
entry_label = tk.Label(root, text="Enter student ID:", font=("Arial", 14), bg="#B3E5FC", fg="black")
entry_label.place(x=750, y=120)

entry_id = tk.Entry(root, font=("Arial", 14), width=20, bd=2)
entry_id.place(x=750, y=150)

# === KHUNG HI·ªÇN TH·ªä TH√îNG TIN SINH VI√äN ===
info_frame = tk.Frame(root, width=200, height=250, bg="white", relief="solid", borderwidth=2)
info_frame.place(x=750, y=200)

info_label = tk.Label(info_frame, text="hi·ªÉn th·ªã\nth√¥ng tin\nsinh vi√™n", font=("Arial", 14, "bold"), bg="white")
info_label.place(relx=0.5, rely=0.5, anchor="center")

# === N√öT SAVE ===
btn_save = tk.Button(root, text="Save", font=("Arial", 14, "bold"), bg="#4699A6", fg="white",
                     width=10, height=2, borderwidth=0)
btn_save.place(x=800, y=480)

# === H∆Ø·ªöNG D·∫™N QUAY M·∫∂T ===
status_label = tk.Label(root, text="üì∑ H√£y quay m·∫∑t th·∫≥ng v·ªÅ ph√≠a camera",
                        font=("Arial", 12), fg="black", bg="#B3E5FC")
status_label.place(relx=0.5, rely=0.95, anchor="center")


def calculate_face_angle(face):
    """T√≠nh g√≥c nghi√™ng c·ªßa khu√¥n m·∫∑t d·ª±a v√†o hai m·∫Øt"""
    landmarks = face.kps  # 5 ƒëi·ªÉm landmark g·ªìm m·∫Øt tr√°i, m·∫Øt ph·∫£i, m≈©i, mi·ªáng tr√°i, mi·ªáng ph·∫£i
    left_eye = landmarks[0]
    right_eye = landmarks[1]

    delta_x = right_eye[0] - left_eye[0]
    delta_y = right_eye[1] - left_eye[1]

    angle = math.degrees(math.atan2(delta_y, delta_x))  # Chuy·ªÉn ƒë·ªïi sang ƒë·ªô

    return abs(angle)  # Tr·∫£ v·ªÅ gi√° tr·ªã tuy·ªát ƒë·ªëi c·ªßa g√≥c


def show_frame():
    """Hi·ªÉn th·ªã webcam tr√™n giao di·ªán"""
    ret, frame = cap.read()
    if ret:
        faces = app.get(frame)

        if faces:
            for face in faces:
                x1, y1, x2, y2 = map(int, face.bbox)
                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

                # Ki·ªÉm tra g√≥c quay c·ªßa m·∫∑t
                angle = calculate_face_angle(face)
                if angle > 15:
                    status_label.config(text=f"‚ö†Ô∏è M·∫∑t ƒëang nghi√™ng ({angle:.2f}¬∞), h√£y quay th·∫≥ng!", fg="red")
                else:
                    status_label.config(text="‚úÖ M·∫∑t th·∫≥ng, c√≥ th·ªÉ l∆∞u!", fg="green")

        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        frame = cv2.resize(frame, (640, 400))

        # Chuy·ªÉn ƒë·ªïi th√†nh ·∫£nh Tkinter
        img = Image.fromarray(frame)
        imgtk = ImageTk.PhotoImage(image=img)
        video_label.imgtk = imgtk
        video_label.configure(image=imgtk)

    video_label.after(10, show_frame)


def capture_and_save_embedding():
    global student_id
    student_id = entry_id.get().strip()

    if not student_id:
        messagebox.showwarning("‚ö†Ô∏è L·ªói", "Vui l√≤ng nh·∫≠p MSSV tr∆∞·ªõc khi thu th·∫≠p!")
        return

    ret, frame = cap.read()
    if not ret:
        messagebox.showerror("‚ùå L·ªói", "Kh√¥ng th·ªÉ ch·ª•p ·∫£nh t·ª´ camera!")
        return

    faces = app.get(frame)

    if faces:
        face = faces[0]

        angle = calculate_face_angle(face)
        if angle <= 15:
            face_embedding = face.normed_embedding
            np.save(os.path.join(embedding_dir, f"{student_id}_embedding.npy"), face_embedding)
            messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ l∆∞u embedding cho MSSV {student_id}")
        else:
            status_label.config(text=f"‚ö†Ô∏è M·∫∑t ƒëang nghi√™ng ({angle:.2f}¬∞), h√£y th·ª≠ l·∫°i!", fg="red")
            messagebox.showwarning("‚ö†Ô∏è L·ªói", "M·∫∑t ch∆∞a quay th·∫≥ng, h√£y th·ª≠ l·∫°i!")
    else:
        status_label.config(text="‚ùå Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t!", fg="red")
        messagebox.showerror("‚ùå L·ªói", "Kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t, h√£y th·ª≠ l·∫°i!")


def close_app():
    """Tho√°t ch∆∞∆°ng tr√¨nh"""
    cap.release()
    cv2.destroyAllWindows()
    root.quit()


btn_save.config(command=capture_and_save_embedding)

# Hi·ªÉn th·ªã camera tr√™n giao di·ªán
show_frame()

# Ch·∫°y giao di·ªán Tkinter
root.mainloop()
