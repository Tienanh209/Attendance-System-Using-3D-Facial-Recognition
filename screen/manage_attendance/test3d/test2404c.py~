import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
import numpy as np

# Thiết lập kiểu dáng cho biểu đồ dễ nhìn
plt.style.use('seaborn-v0_8-whitegrid')
sns.set_context("talk")  # Font lớn để dễ đọc
colors = {'real': 'green', 'spoof': 'red'}  # Màu cho real và spoof


# Hàm mô phỏng dữ liệu nếu CSV lỗi
def simulate_data(real_count, spoof_count, stats):
    np.random.seed(42)  # Đảm bảo kết quả lặp lại
    real_nose_eye_diff = np.random.normal(stats['nose_eye_diff']['real'], 5, real_count)
    spoof_nose_eye_diff = np.random.normal(stats['nose_eye_diff']['spoof'], 2, spoof_count)
    real_face_std_dev = np.random.normal(stats['face_std_dev']['real'], 10, real_count)
    spoof_face_std_dev = np.random.normal(stats['face_std_dev']['spoof'], 3, spoof_count)

    real_data = pd.DataFrame({
        'nose_eye_diff': real_nose_eye_diff,
        'face_std_dev': real_face_std_dev,
        'label': 'real'
    })
    spoof_data = pd.DataFrame({
        'nose_eye_diff': spoof_nose_eye_diff,
        'face_std_dev': spoof_face_std_dev,
        'label': 'spoof'
    })
    return pd.concat([real_data, spoof_data], ignore_index=True)


# Dữ liệu thống kê dự phòng
stats = {
    'nose_eye_diff': {'real': 19.43, 'spoof': 5.81},
    'face_std_dev': {'real': 82.87, 'spoof': 9.90}
}
total_samples = 536
real_count_expected = 275
spoof_count_expected = 261

# Đọc file CSV từ cùng thư mục
csv_file = 'depth_data_20250424_194815.csv'
df = None
try:
    df = pd.read_csv(csv_file, delimiter=',', encoding='utf-8')
except FileNotFoundError:
    print(f"Lỗi: Không tìm thấy file '{csv_file}'. Sử dụng dữ liệu mô phỏng.")
except pd.errors.ParserError:
    print(f"Lỗi: Không thể phân tích file CSV. Thử delimiter ';':")
    try:
        df = pd.read_csv(csv_file, delimiter=';', encoding='utf-8')
    except Exception as e:
        print(f"Lỗi khi thử delimiter ';': {e}. Sử dụng dữ liệu mô phỏng.")

# Nếu không đọc được CSV, mô phỏng dữ liệu
if df is None:
    print("Mô phỏng dữ liệu dựa trên thống kê cung cấp...")
    df = simulate_data(real_count_expected, spoof_count_expected, stats)

# Kiểm tra các cột cần thiết
required_columns = ['face_std_dev', 'nose_eye_diff', 'label']
if df is not None and not all(col in df.columns for col in required_columns):
    print(f"Lỗi: File CSV phải chứa các cột: {required_columns}. Sử dụng dữ liệu mô phỏng.")
    df = simulate_data(real_count_expected, spoof_count_expected, stats)

# Chuyển đổi cột sang kiểu numeric
try:
    df['nose_eye_diff'] = pd.to_numeric(df['nose_eye_diff'], errors='coerce')
    df['face_std_dev'] = pd.to_numeric(df['face_std_dev'], errors='coerce')
except Exception as e:
    print(f"Lỗi khi chuyển đổi cột sang numeric: {e}. Sử dụng dữ liệu mô phỏng.")
    df = simulate_data(real_count_expected, spoof_count_expected, stats)

# Loại bỏ các hàng có giá trị NaN
initial_len = len(df)
df = df.dropna(subset=['nose_eye_diff', 'face_std_dev'])
if len(df) < initial_len:
    print(f"Cảnh báo: Đã loại bỏ {initial_len - len(df)} hàng chứa giá trị NaN.")

# Kiểm tra dữ liệu rỗng
if df.empty:
    print("Lỗi: Dữ liệu rỗng sau khi xử lý. Sử dụng dữ liệu mô phỏng.")
    df = simulate_data(real_count_expected, spoof_count_expected, stats)

# Tách dữ liệu thành real và spoof
real_data = df[df['label'] == 'real']
spoof_data = df[df['label'] == 'spoof']

# Kiểm tra dữ liệu real và spoof
if real_data.empty or spoof_data.empty:
    print(
        f"Lỗi: Dữ liệu real hoặc spoof rỗng (Real: {len(real_data)}, Spoof: {len(spoof_data)}). Sử dụng dữ liệu mô phỏng.")
    df = simulate_data(real_count_expected, spoof_count_expected, stats)
    real_data = df[df['label'] == 'real']
    spoof_data = df[df['label'] == 'spoof']

# Tính toán thống kê
total_samples = len(df)
real_count = len(real_data)
spoof_count = len(spoof_data)
stats_calculated = {
    'nose_eye_diff': {
        'real': real_data['nose_eye_diff'].mean(),
        'spoof': spoof_data['nose_eye_diff'].mean()
    },
    'face_std_dev': {
        'real': real_data['face_std_dev'].mean(),
        'spoof': spoof_data['face_std_dev'].mean()
    }
}

# Kiểm tra NaN trong giá trị trung bình
for metric in ['nose_eye_diff', 'face_std_dev']:
    for label in ['real', 'spoof']:
        if pd.isna(stats_calculated[metric][label]):
            print(f"Lỗi: Giá trị trung bình {metric} cho {label} là NaN. Sử dụng dữ liệu mô phỏng.")
            df = simulate_data(real_count_expected, spoof_count_expected, stats)
            real_data = df[df['label'] == 'real']
            spoof_data = df[df['label'] == 'spoof']
            stats_calculated = {
                'nose_eye_diff': {
                    'real': real_data['nose_eye_diff'].mean(),
                    'spoof': spoof_data['nose_eye_diff'].mean()
                },
                'face_std_dev': {
                    'real': real_data['face_std_dev'].mean(),
                    'spoof': spoof_data['face_std_dev'].mean()
                }
            }
            break

# In thống kê
print("Thống kê dữ liệu:")
print(f"  Tổng số mẫu: {total_samples}")
print(f"  Số mẫu Real: {real_count}")
print(f"  Số mẫu Spoof: {spoof_count}")
print(
    f"  Chênh lệch mũi-mắt trung bình (mm): Real = {stats_calculated['nose_eye_diff']['real']:.2f}, Spoof = {stats_calculated['nose_eye_diff']['spoof']:.2f}")
print(
    f"  Độ lệch chuẩn vùng mặt trung bình (mm): Real = {stats_calculated['face_std_dev']['real']:.2f}, Spoof = {stats_calculated['face_std_dev']['spoof']:.2f}")

# Tạo thư mục lưu biểu đồ
output_dir = 'plots'
os.makedirs(output_dir, exist_ok=True)

# Định nghĩa ngưỡng
nose_eye_diff_threshold = 10  # mm
face_std_dev_threshold = 20  # mm

# 1. Biểu đồ scatter plot cho nose_eye_diff
plt.figure(figsize=(10, 6))
plt.scatter(real_data.index, real_data['nose_eye_diff'], s=50, color=colors['real'], label='Real', alpha=0.6)
plt.scatter(spoof_data.index, spoof_data['nose_eye_diff'], s=50, color=colors['spoof'], label='Spoof', alpha=0.6)
plt.axhline(y=nose_eye_diff_threshold, color='black', linestyle='--', label=f'Threshold: {nose_eye_diff_threshold} mm')
plt.xlabel('Sample Index')
plt.ylabel('Nose-Eye Difference (mm)')
plt.title('Scatter Plot of Nose-Eye Difference (All Points)')
plt.ylim(min(df['nose_eye_diff'].min(), 0), max(df['nose_eye_diff'].max(), nose_eye_diff_threshold) * 1.2)
plt.legend()
plt.tight_layout()
plt.savefig(os.path.join(output_dir, 'scatter_nose_eye_diff_all_points.png'), dpi=300)
plt.close()

# 2. Biểu đồ scatter plot cho face_std_dev
plt.figure(figsize=(10, 6))
plt.scatter(real_data.index, real_data['face_std_dev'], s=50, color=colors['real'], label='Real', alpha=0.6)
plt.scatter(spoof_data.index, spoof_data['face_std_dev'], s=50, color=colors['spoof'], label='Spoof', alpha=0.6)
plt.axhline(y=face_std_dev_threshold, color='black', linestyle='--', label=f'Threshold: {face_std_dev_threshold} mm')
plt.xlabel('Sample Index')
plt.ylabel('Face Std Dev (mm)')
plt.title('Scatter Plot of Face Std Dev (All Points)')
plt.ylim(min(df['face_std_dev'].min(), 0), max(df['face_std_dev'].max(), face_std_dev_threshold) * 1.2)
plt.legend()
plt.tight_layout()
plt.savefig(os.path.join(output_dir, 'scatter_face_std_dev_all_points.png'), dpi=300)
plt.close()

# Thông báo hoàn tất
print("\nCác biểu đồ đã được lưu dưới dạng file PNG.")