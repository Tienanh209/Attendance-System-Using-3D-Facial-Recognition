import os
import math
import cv2
import numpy as np
import insightface
from insightface.app import FaceAnalysis
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk

class FaceAuthenticationApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Face Authentication")
        self.root.geometry("1000x650")
        self.root.configure(bg="#B3E5FC")  # M√†u n·ªÅn xanh bi·ªÉn nh·∫°t

        # Kh·ªüi t·∫°o th∆∞ m·ª•c l∆∞u embeddings
        self.embedding_dir = "embeddings/"
        os.makedirs(self.embedding_dir, exist_ok=True)

        # Kh·ªüi t·∫°o b·ªô nh·∫≠n di·ªán khu√¥n m·∫∑t InsightFace
        self.app = FaceAnalysis(allowed_modules=['detection', 'recognition'])
        self.app.prepare(ctx_id=0, det_size=(640, 640))

        # Kh·ªüi t·∫°o webcam
        self.cap = cv2.VideoCapture(0)

        # Bi·∫øn l∆∞u ID sinh vi√™n
        self.student_id = None

        # Kh·ªüi t·∫°o giao di·ªán
        self.create_widgets()

        self.show_frame()

    def create_widgets(self):
        # N√∫t quay l·∫°i
        self.btn_back = tk.Button(self.root, text="Back", font=("Arial", 12, "bold"),
                                  bg="#4699A6", fg="white", width=10, height=2, borderwidth=0,
                                  command=self.close_app)
        self.btn_back.place(x=30, y=20)

        # Ti√™u ƒë·ªÅ
        self.header_label = tk.Label(self.root, text="Face Authentication", font=("Arial", 24, "bold"),
                                     bg="#B3E5FC", fg="black")
        self.header_label.place(relx=0.5, y=40, anchor="center")

        # Khung hi·ªÉn th·ªã camera
        self.video_frame = tk.Frame(self.root, width=640, height=400, bg="white", relief="solid",
                                    borderwidth=2, highlightbackground="#8A2BE2", highlightthickness=3)
        self.video_frame.place(x=60, y=100)

        self.video_label = tk.Label(self.video_frame, text="Khung hi·ªÉn th·ªã camera", font=("Arial", 18, "bold"),
                                    bg="white")
        self.video_label.place(relx=0.5, rely=0.5, anchor="center")

        # √î nh·∫≠p MSSV
        self.entry_label = tk.Label(self.root, text="Enter student ID:", font=("Arial", 14),
                                    bg="#B3E5FC", fg="black")
        self.entry_label.place(x=750, y=120)

        self.entry_id = tk.Entry(self.root, font=("Arial", 14), width=20, bd=2)
        self.entry_id.place(x=750, y=150)

        # Khung hi·ªÉn th·ªã th√¥ng tin sinh vi√™n
        self.info_frame = tk.Frame(self.root, width=200, height=250, bg="white", relief="solid", borderwidth=2)
        self.info_frame.place(x=750, y=200)

        self.info_label = tk.Label(self.info_frame, text="Th√¥ng tin\nsinh vi√™n", font=("Arial", 14, "bold"), bg="white")
        self.info_label.place(relx=0.5, rely=0.5, anchor="center")

        # N√∫t l∆∞u khu√¥n m·∫∑t
        self.btn_save = tk.Button(self.root, text="Save", font=("Arial", 14, "bold"),
                                  bg="#4699A6", fg="white", width=10, height=2, borderwidth=0,
                                  command=self.capture_and_save_embedding)
        self.btn_save.place(x=800, y=480)

        # H∆∞·ªõng d·∫´n quay m·∫∑t
        self.status_label = tk.Label(self.root, text="üì∑ H√£y quay m·∫∑t th·∫≥ng v·ªÅ ph√≠a camera",
                                     font=("Arial", 12), fg="black", bg="#B3E5FC")
        self.status_label.place(relx=0.5, rely=0.95, anchor="center")

    def calculate_face_angle(self, face):
        landmarks = face.kps  # 5 ƒëi·ªÉm landmark g·ªìm m·∫Øt tr√°i, m·∫Øt ph·∫£i, m≈©i, mi·ªáng tr√°i, mi·ªáng ph·∫£i
        left_eye = landmarks[0]
        right_eye = landmarks[1]

        delta_x = right_eye[0] - left_eye[0]
        delta_y = right_eye[1] - left_eye[1]

        angle = math.degrees(math.atan2(delta_y, delta_x))  # Chuy·ªÉn ƒë·ªïi sang ƒë·ªô

        return abs(angle)  # Tr·∫£ v·ªÅ gi√° tr·ªã tuy·ªát ƒë·ªëi c·ªßa g√≥c

    def show_frame(self):
        ret, frame = self.cap.read()
        if ret:
            faces = self.app.get(frame)

            if faces:
                for face in faces:
                    x1, y1, x2, y2 = map(int, face.bbox)
                    cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

                    # Ki·ªÉm tra g√≥c quay c·ªßa m·∫∑t
                    angle = self.calculate_face_angle(face)
                    if angle > 15:
                        self.status_label.config(text=f"‚ö†Ô∏è M·∫∑t ƒëang nghi√™ng ({angle:.2f}¬∞), h√£y quay th·∫≥ng!", fg="red")
                    else:
                        self.status_label.config(text="‚úÖ M·∫∑t th·∫≥ng, c√≥ th·ªÉ l∆∞u!", fg="green")

            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            frame = cv2.resize(frame, (640, 400))

            # Chuy·ªÉn ƒë·ªïi th√†nh ·∫£nh Tkinter
            img = Image.fromarray(frame)
            imgtk = ImageTk.PhotoImage(image=img)
            self.video_label.imgtk = imgtk
            self.video_label.configure(image=imgtk)

        self.video_label.after(10, self.show_frame)

    def capture_and_save_embedding(self):
        """Ch·ª•p ·∫£nh v√† l∆∞u embedding khu√¥n m·∫∑t"""
        self.student_id = self.entry_id.get().strip()

        if not self.student_id:
            messagebox.showwarning("‚ö†Ô∏è L·ªói", "Vui l√≤ng nh·∫≠p MSSV tr∆∞·ªõc khi thu th·∫≠p!")
            return

        ret, frame = self.cap.read()
        if not ret:
            messagebox.showerror("‚ùå L·ªói", "Kh√¥ng th·ªÉ ch·ª•p ·∫£nh t·ª´ camera!")
            return

        faces = self.app.get(frame)

        if faces:
            face = faces[0]

            angle = self.calculate_face_angle(face)
            if angle <= 15:
                face_embedding = face.normed_embedding
                np.save(os.path.join(self.embedding_dir, f"{self.student_id}_embedding.npy"), face_embedding)
                messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ l∆∞u embedding cho MSSV {self.student_id}")
            else:
                self.status_label.config(text=f"‚ö†Ô∏è M·∫∑t ƒëang nghi√™ng ({angle:.2f}¬∞), h√£y th·ª≠ l·∫°i!", fg="red")
                messagebox.showwarning("‚ö†Ô∏è L·ªói", "M·∫∑t ch∆∞a quay th·∫≥ng, h√£y th·ª≠ l·∫°i!")
        else:
            self.status_label.config(text="‚ùå Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t!", fg="red")
            messagebox.showerror("‚ùå L·ªói", "Kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t, h√£y th·ª≠ l·∫°i!")

    def close_app(self):
        self.cap.release()
        cv2.destroyAllWindows()
        self.root.quit()

if __name__ == "__main__":
    root = tk.Tk()
    app = FaceAuthenticationApp(root)
    root.mainloop()
#
# import os
# import math
# import cv2
# import numpy as np
# import insightface
# from insightface.app import FaceAnalysis
# import tkinter as tk
# from tkinter import messagebox
# from PIL import Image, ImageTk
#
#
# class FaceAuthenticationApp:
#     def __init__(self, root):
#         self.root = root
#         self.root.title("Face Authentication")
#         self.root.geometry("1000x650")
#         self.root.configure(bg="#B3E5FC")  # M√†u n·ªÅn xanh bi·ªÉn nh·∫°t
#
#         # Kh·ªüi t·∫°o th∆∞ m·ª•c l∆∞u embeddings
#         self.embedding_dir = "embeddings/"
#         os.makedirs(self.embedding_dir, exist_ok=True)
#
#         # Kh·ªüi t·∫°o b·ªô nh·∫≠n di·ªán khu√¥n m·∫∑t InsightFace
#         self.app = FaceAnalysis(allowed_modules=['detection', 'recognition'])
#         self.app.prepare(ctx_id=0, det_size=(640, 640))
#
#         # Kh·ªüi t·∫°o webcam
#         self.cap = cv2.VideoCapture(0)
#
#         # Bi·∫øn l∆∞u ID sinh vi√™n
#         self.student_id = None
#
#         # Kh·ªüi t·∫°o giao di·ªán
#         self.create_widgets()
#
#         self.show_frame()
#
#     def create_widgets(self):
#         # N√∫t quay l·∫°i
#         self.btn_back = tk.Button(self.root, text="Back", font=("Arial", 12, "bold"),
#                                   bg="#4699A6", fg="white", width=10, height=2, borderwidth=0,
#                                   command=self.close_app, relief="ridge")
#         self.btn_back.place(x=30, y=20)
#
#         self.btn_back.configure(highlightbackground="#4699A6", highlightthickness=2, relief="ridge")
#         self.btn_back.config(borderwidth=2, padx=5, pady=2, bd=2, relief="ridge")
#
#         # Ti√™u ƒë·ªÅ
#         self.header_label = tk.Label(self.root, text="Face Authentication", font=("Arial", 24, "bold"),
#                                      bg="#B3E5FC", fg="black")
#         self.header_label.place(relx=0.5, y=40, anchor="center")
#
#         # Khung hi·ªÉn th·ªã camera
#         self.video_frame = tk.Frame(self.root, width=640, height=400, bg="white", relief="solid",
#                                     borderwidth=2, highlightbackground="#8A2BE2", highlightthickness=3)
#         self.video_frame.place(x=60, y=100)
#
#         self.video_label = tk.Label(self.video_frame, text="Khung hi·ªÉn th·ªã camera", font=("Arial", 18, "bold"),
#                                     bg="white")
#         self.video_label.place(relx=0.5, rely=0.5, anchor="center")
#
#         # √î nh·∫≠p MSSV
#         self.entry_label = tk.Label(self.root, text="Enter student ID:", font=("Arial", 14),
#                                     bg="#B3E5FC", fg="black")
#         self.entry_label.place(x=750, y=120)
#
#         self.entry_id = tk.Entry(self.root, font=("Arial", 14), width=20, bd=2)
#         self.entry_id.place(x=750, y=150)
#
#         # Khung hi·ªÉn th·ªã th√¥ng tin sinh vi√™n
#         self.info_frame = tk.Frame(self.root, width=200, height=250, bg="white", relief="solid", borderwidth=2)
#         self.info_frame.place(x=750, y=200)
#
#         self.info_label = tk.Label(self.info_frame, text="Th√¥ng tin\nsinh vi√™n", font=("Arial", 14, "bold"), bg="white")
#         self.info_label.place(relx=0.5, rely=0.5, anchor="center")
#
#         # N√∫t l∆∞u khu√¥n m·∫∑t
#         self.btn_save = tk.Button(self.root, text="Save", font=("Arial", 14, "bold"),
#                                   bg="#4699A6", fg="white", width=10, height=2, borderwidth=0,
#                                   command=self.capture_and_save_embedding, relief="ridge")
#         self.btn_save.place(x=800, y=480)
#
#         self.btn_save.configure(highlightbackground="#4699A6", highlightthickness=2, relief="ridge")
#         self.btn_save.config(borderwidth=2, padx=5, pady=2, bd=2, relief="ridge")
#
#         # H∆∞·ªõng d·∫´n quay m·∫∑t
#         self.status_label = tk.Label(self.root, text="üì∑ H√£y quay m·∫∑t th·∫≥ng v·ªÅ ph√≠a camera",
#                                      font=("Arial", 12), fg="black", bg="#B3E5FC")
#         self.status_label.place(relx=0.5, rely=0.95, anchor="center")
#
#     def calculate_face_angle(self, face):
#         landmarks = face.kps
#         left_eye = landmarks[0]
#         right_eye = landmarks[1]
#
#         delta_x = right_eye[0] - left_eye[0]
#         delta_y = right_eye[1] - left_eye[1]
#
#         angle = math.degrees(math.atan2(delta_y, delta_x))
#         return abs(angle)
#
#     def show_frame(self):
#         ret, frame = self.cap.read()
#         if ret:
#             faces = self.app.get(frame)
#
#             if faces:
#                 for face in faces:
#                     x1, y1, x2, y2 = map(int, face.bbox)
#                     cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
#
#                     angle = self.calculate_face_angle(face)
#                     if angle > 15:
#                         self.status_label.config(text=f"‚ö†Ô∏è M·∫∑t ƒëang nghi√™ng ({angle:.2f}¬∞), h√£y quay th·∫≥ng!", fg="red")
#                     else:
#                         self.status_label.config(text="‚úÖ M·∫∑t th·∫≥ng, c√≥ th·ªÉ l∆∞u!", fg="green")
#
#             frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
#             frame = cv2.resize(frame, (640, 400))
#
#             img = Image.fromarray(frame)
#             imgtk = ImageTk.PhotoImage(image=img)
#             self.video_label.imgtk = imgtk
#             self.video_label.configure(image=imgtk)
#
#         self.video_label.after(10, self.show_frame)
#
#     def capture_and_save_embedding(self):
#         self.student_id = self.entry_id.get().strip()
#         if not self.student_id:
#             messagebox.showwarning("‚ö†Ô∏è L·ªói", "Vui l√≤ng nh·∫≠p MSSV tr∆∞·ªõc khi thu th·∫≠p!")
#             return
#
#         ret, frame = self.cap.read()
#         if not ret:
#             messagebox.showerror("‚ùå L·ªói", "Kh√¥ng th·ªÉ ch·ª•p ·∫£nh t·ª´ camera!")
#             return
#
#         faces = self.app.get(frame)
#         if faces:
#             face = faces[0]
#             angle = self.calculate_face_angle(face)
#             if angle <= 15:
#                 face_embedding = face.normed_embedding
#                 np.save(os.path.join(self.embedding_dir, f"{self.student_id}_embedding.npy"), face_embedding)
#                 messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ l∆∞u embedding cho MSSV {self.student_id}")
#             else:
#                 self.status_label.config(text=f"‚ö†Ô∏è M·∫∑t ƒëang nghi√™ng ({angle:.2f}¬∞), h√£y th·ª≠ l·∫°i!", fg="red")
#                 messagebox.showwarning("‚ö†Ô∏è L·ªói", "M·∫∑t ch∆∞a quay th·∫≥ng, h√£y th·ª≠ l·∫°i!")
#         else:
#             self.status_label.config(text="‚ùå Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t!", fg="red")
#             messagebox.showerror("‚ùå L·ªói", "Kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t, h√£y th·ª≠ l·∫°i!")
#
#     def close_app(self):
#         self.cap.release()
#         cv2.destroyAllWindows()
#         self.root.quit()
#
#
# if __name__ == "__main__":
#     root = tk.Tk()
#     app = FaceAuthenticationApp(root)
#     root.mainloop()