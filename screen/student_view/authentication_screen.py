import os
import math
import cv2
import numpy as np
import insightface
from insightface.app import FaceAnalysis
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import mysql.connector

class FaceAuthenticationApp:
    def __init__(self, root):
        self.root = root
        self.root.title("X√°c Th·ª±c Khu√¥n M·∫∑t")
        self.root.geometry("1000x650")
        self.root.configure(bg="#B3E5FC")  # M√†u n·ªÅn xanh bi·ªÉn nh·∫°t

        # Kh·ªüi t·∫°o th∆∞ m·ª•c l∆∞u tr·ªØ embedding
        self.embedding_dir = "../../assets/datasets"
        os.makedirs(self.embedding_dir, exist_ok=True)

        # Kh·ªüi t·∫°o ph√¢n t√≠ch khu√¥n m·∫∑t InsightFace
        self.app = FaceAnalysis(allowed_modules=['detection', 'recognition'])
        self.app.prepare(ctx_id=0, det_size=(640, 640))

        # Kh·ªüi t·∫°o webcam
        self.cap = cv2.VideoCapture(1)

        # Bi·∫øn l∆∞u ID sinh vi√™n
        self.student_id = None

        # Kh·ªüi t·∫°o giao di·ªán ng∆∞·ªùi d√πng
        self.create_widgets()

        self.show_frame()

    def close_current_window(self):
        """ƒê√≥ng c·ª≠a s·ªï hi·ªán t·∫°i m√† kh√¥ng tho√°t to√†n b·ªô ·ª©ng d·ª•ng"""
        self.cap.release()  # Gi·∫£i ph√≥ng webcam
        self.root.destroy()  # ƒê√≥ng c·ª≠a s·ªï hi·ªán t·∫°i

    def create_widgets(self):
        self.btn_back = tk.Button(self.root, text="Quay l·∫°i", font=("Arial", 12, "bold"),
                                  bg="#4699A6", fg="white", width=10, height=2, borderwidth=0,
                                  command=self.close_current_window)
        self.btn_back.place(x=30, y=20)



        self.header_label = tk.Label(self.root, text="X√°c Th·ª±c Khu√¥n M·∫∑t", font=("Arial", 24, "bold"),
                                     bg="#B3E5FC", fg="black")
        self.header_label.place(relx=0.5, y=40, anchor="center")

        self.video_frame = tk.Frame(self.root, width=640, height=400, bg="white", relief="solid",
                                    borderwidth=2, highlightbackground="#8A2BE2", highlightthickness=3)
        self.video_frame.place(x=60, y=100)

        self.video_label = tk.Label(self.video_frame, text="Khung hi·ªÉn th·ªã camera", font=("Arial", 18, "bold"),
                                    bg="white")
        self.video_label.place(relx=0.5, rely=0.5, anchor="center")

        self.entry_label = tk.Label(self.root, text="Nh·∫≠p ID sinh vi√™n:", font=("Arial", 14),
                                    bg="#B3E5FC", fg="black")
        self.entry_label.place(x=750, y=120)

        self.entry_id = tk.Entry(self.root, font=("Arial", 14), width=20, bd=2)
        self.entry_id.place(x=750, y=150)
        self.entry_id.bind("<Return>", self.fetch_and_display_student_info)

        # TƒÉng chi·ªÅu r·ªông khung th√¥ng tin ƒë·ªÉ ch·ª©a n·ªôi dung t·ªët h∆°n
        self.info_frame = tk.Frame(self.root, width=280, height=280, bg="white", relief="solid", borderwidth=2)
        self.info_frame.place(x=710, y=200)

        # Nh√£n ti√™u ƒë·ªÅ "Th√¥ng Tin Sinh Vi√™n"
        self.info_title_label = tk.Label(self.info_frame, text="Th√¥ng Tin Sinh Vi√™n", font=("Arial", 14, "bold"), bg="white")
        self.info_title_label.place(relx=0.5, y=20, anchor="center")

        # Gi·∫£m wraplength ƒë·ªÉ vƒÉn b·∫£n t·ª± ƒë·ªông xu·ªëng d√≤ng s·ªõm h∆°n
        self.info_label = tk.Label(self.info_frame, text="Nh·∫≠p ID sinh vi√™n\nƒë·ªÉ xem th√¥ng tin", font=("Arial", 11), bg="white", justify="left", wraplength=220, anchor="w", padx=15)
        self.info_label.place(x=15, y=50)

        # Di chuy·ªÉn n√∫t L∆∞u xu·ªëng d∆∞·ªõi ƒë·ªÉ kh√¥ng che vi·ªÅn c·ªßa info_frame
        self.btn_save = tk.Button(self.root, text="L∆∞u", font=("Arial", 14, "bold"),
                                  bg="#4699A6", fg="white", width=10, height=2, borderwidth=0,
                                  command=self.capture_and_save_embedding)
        self.btn_save.place(x=800, y=500)

        self.status_label = tk.Label(self.root, text="üì∑ Vui l√≤ng nh√¨n th·∫≥ng v√†o camera",
                                     font=("Arial", 12), fg="black", bg="#B3E5FC")
        self.status_label.place(relx=0.5, rely=0.95, anchor="center")

    def fetch_and_display_student_info(self, event=None):
        """L·∫•y th√¥ng tin sinh vi√™n t·ª´ c∆° s·ªü d·ªØ li·ªáu MySQL v√† hi·ªÉn th·ªã"""
        student_id = self.entry_id.get().strip()

        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng ID sinh vi√™n (Bxxxxxxx)
        if not student_id.startswith("B") or len(student_id) != 8 or not student_id[1:].isdigit():
            messagebox.showwarning("‚ö†Ô∏è L·ªói", "ƒê·ªãnh d·∫°ng ID sinh vi√™n kh√¥ng h·ª£p l·ªá! Ph·∫£i l√† Bxxxxxxx (v√≠ d·ª•: B1234567)")
            self.info_label.config(text="Nh·∫≠p ID sinh vi√™n\nƒë·ªÉ xem th√¥ng tin")
            return

        # L·∫•y d·ªØ li·ªáu sinh vi√™n t·ª´ MySQL
        student_data = self.fetch_student_data(student_id)

        if student_data:
            # ƒê·ªãnh d·∫°ng th√¥ng tin sinh vi√™n v·ªõi kho·∫£ng c√°ch r√µ r√†ng v√† ƒë·ªìng ƒë·ªÅu
            info_text = (
                f"ID: {student_data['id']}\n"
                f"T√™n: {student_data['name']}\n"
                f"Ng√†y sinh: {student_data['birthday']}\n"
                f"Email: {student_data['email']}"
            )
            self.info_label.config(text=info_text)
        else:
            messagebox.showerror("‚ùå L·ªói", f"Kh√¥ng t√¨m th·∫•y sinh vi√™n v·ªõi ID: {student_id}")
            self.info_label.config(text="Nh·∫≠p ID sinh vi√™n\nƒë·ªÉ xem th√¥ng tin")

    def fetch_student_data(self, student_id):
        """L·∫•y d·ªØ li·ªáu sinh vi√™n t·ª´ c∆° s·ªü d·ªØ li·ªáu MySQL"""
        try:
            conn = mysql.connector.connect(
                host='localhost',
                user='root',
                password='',
                database='face_recognition_sys',
                port='3306'
            )
            my_cursor = conn.cursor()
            my_cursor.execute(
                "SELECT id_student, name_student, birthday, email FROM student WHERE id_student = %s",
                (student_id,)
            )
            row = my_cursor.fetchone()
            conn.close()

            if row:
                return {
                    "id": row[0],
                    "name": row[1],
                    "birthday": row[2],
                    "email": row[3]
                }
            return None

        except mysql.connector.Error as err:
            messagebox.showerror("‚ùå L·ªói C∆° S·ªü D·ªØ Li·ªáu", f"L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu: {err}")
            return None

    def calculate_face_orientation(self, face):
        """T√≠nh h∆∞·ªõng khu√¥n m·∫∑t (yaw, pitch, roll) b·∫±ng c√°ch s·ª≠ d·ª•ng c√°c ƒëi·ªÉm m·ªëc"""
        landmarks = face.kps
        left_eye = landmarks[0]
        right_eye = landmarks[1]
        nose = landmarks[2]
        left_mouth = landmarks[3]
        right_mouth = landmarks[4]

        delta_x = right_eye[0] - left_eye[0]
        delta_y = right_eye[1] - left_eye[1]
        roll = math.degrees(math.atan2(delta_y, delta_x))

        eye_midpoint_x = (left_eye[0] + right_eye[0]) / 2
        yaw = (nose[0] - eye_midpoint_x) / (right_eye[0] - left_eye[0]) * 90

        eye_midpoint_y = (left_eye[1] + right_eye[1]) / 2
        mouth_midpoint_y = (left_mouth[1] + right_mouth[1]) / 2
        face_height = mouth_midpoint_y - eye_midpoint_y
        nose_relative_y = (nose[1] - eye_midpoint_y) / face_height
        pitch = (nose_relative_y - 0.3) * 100

        return roll, yaw, pitch

    def classify_orientation(self, roll, yaw, pitch):
        """Ph√¢n lo·∫°i h∆∞·ªõng khu√¥n m·∫∑t d·ª±a tr√™n roll v√† yaw"""
        roll_threshold = 15
        yaw_threshold = 15

        if abs(roll) <= roll_threshold and abs(yaw) <= yaw_threshold:
            return "straight", "ƒêang nh√¨n th·∫≥ng"
        elif yaw > yaw_threshold:
            return "right", "ƒêang nghi√™ng ph·∫£i"
        elif yaw < -yaw_threshold:
            return "left", "ƒêang nghi√™ng tr√°i"
        else:
            return None, "ƒêi·ªÅu ch·ªânh v·ªã tr√≠ khu√¥n m·∫∑t"

    def show_frame(self):
        ret, frame = self.cap.read()
        if ret:
            faces = self.app.get(frame)

            if faces:
                for face in faces:
                    x1, y1, x2, y2 = map(int, face.bbox)
                    cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

                    roll, yaw, pitch = self.calculate_face_orientation(face)
                    orientation, message = self.classify_orientation(roll, yaw, pitch)

                    if orientation:
                        self.status_label.config(text=f"‚úÖ {message}", fg="green")
                    else:
                        self.status_label.config(text=f"‚ö†Ô∏è {message}", fg="red")

            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            frame = cv2.resize(frame, (640, 400))

            img = Image.fromarray(frame)
            imgtk = ImageTk.PhotoImage(image=img)
            self.video_label.imgtk = imgtk
            self.video_label.configure(image=imgtk)

        self.video_label.after(10, self.show_frame)

    def capture_and_save_embedding(self):
        """Ch·ª•p v√† l∆∞u embedding khu√¥n m·∫∑t d·ª±a tr√™n h∆∞·ªõng v·ªõi c√°ch ƒë·∫∑t t√™n t·ªáp ƒë∆∞·ª£c c·∫£i thi·ªán"""
        self.student_id = self.entry_id.get().strip()

        if not self.student_id:
            messagebox.showwarning("‚ö†Ô∏è L·ªói", "Vui l√≤ng nh·∫≠p ID sinh vi√™n tr∆∞·ªõc khi ch·ª•p!")
            return

        ret, frame = self.cap.read()
        if not ret:
            messagebox.showerror("‚ùå L·ªói", "Kh√¥ng th·ªÉ ch·ª•p ·∫£nh t·ª´ camera!")
            return

        faces = self.app.get(frame)

        if faces:
            face = faces[0]
            roll, yaw, pitch = self.calculate_face_orientation(face)
            orientation, message = self.classify_orientation(roll, yaw, pitch)

            if orientation == "straight":
                base_name = f"{self.student_id}_embedding_thang"
            elif orientation == "left":
                base_name = f"{self.student_id}_embedding_trai"
            elif orientation == "right":
                base_name = f"{self.student_id}_embedding_phai"
            else:
                self.status_label.config(text=f"‚ö†Ô∏è {message}. Vui l√≤ng ƒëi·ªÅu ch·ªânh khu√¥n m·∫∑t!", fg="red")
                messagebox.showwarning("‚ö†Ô∏è L·ªói", "H∆∞·ªõng khu√¥n m·∫∑t kh√¥ng ph√π h·ª£p. Vui l√≤ng ƒëi·ªÅu ch·ªânh v√† th·ª≠ l·∫°i!")
                return

            student_dir = os.path.join(self.embedding_dir, self.student_id)
            os.makedirs(student_dir, exist_ok=True)

            index = 0
            while True:
                if index == 0:
                    embedding_path = os.path.join(student_dir, f"{base_name}.npy")
                else:
                    embedding_path = os.path.join(student_dir, f"{base_name}[{index}].npy")

                if not os.path.exists(embedding_path):
                    break
                index += 1

            face_embedding = face.normed_embedding
            np.save(embedding_path, face_embedding)

            if index == 0:
                display_name = f"{base_name}.npy"
            else:
                display_name = f"{base_name}[{index}].npy"

            messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ l∆∞u embedding d∆∞·ªõi d·∫°ng {display_name} (ID: {self.student_id})")
            self.status_label.config(text=f"‚úÖ ƒê√£ l∆∞u {display_name}. Th·ª≠ h∆∞·ªõng kh√°c.", fg="green")
        else:
            self.status_label.config(text="‚ùå Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t!", fg="red")
            messagebox.showerror("‚ùå L·ªói", "Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t. Vui l√≤ng th·ª≠ l·∫°i!")

    def close_app(self):
        exit()



if __name__ == "__main__":
    root = tk.Tk()
    app = FaceAuthenticationApp(root)
    root.mainloop()