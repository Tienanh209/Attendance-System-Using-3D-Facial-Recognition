import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

# Thiết lập kiểu dáng cho biểu đồ dễ nhìn
plt.style.use('seaborn-v0_8-whitegrid')
sns.set_context("talk")  # Font lớn để dễ đọc
colors = {'real': 'green', 'spoof': 'red'}  # Màu cho real và spoof

# Đọc file CSV từ cùng thư mục
csv_file = 'depth_data_20250424_194815.csv'
try:
    df = pd.read_csv(csv_file)
except FileNotFoundError:
    print(f"Lỗi: Không tìm thấy file '{csv_file}' trong thư mục.")
    exit()

# Kiểm tra các cột cần thiết
required_columns = ['nose_depth', 'avg_eye_depth', 'face_std_dev', 'nose_eye_diff', 'label']
if not all(col in df.columns for col in required_columns):
    print(f"Lỗi: File CSV phải chứa các cột: {required_columns}")
    exit()

# Tách dữ liệu thành real và spoof
real_data = df[df['label'] == 'real']
spoof_data = df[df['label'] == 'spoof']

# Tính toán thống kê
total_samples = len(df)
real_count = len(real_data)
spoof_count = len(spoof_data)
stats = {
    'nose_eye_diff': {
        'real': real_data['nose_eye_diff'].mean(),
        'spoof': spoof_data['nose_eye_diff'].mean()
    },
    'face_std_dev': {
        'real': real_data['face_std_dev'].mean(),
        'spoof': spoof_data['face_std_dev'].mean()
    }
}

# In thống kê
print("Thống kê dữ liệu:")
print(f"  Tổng số mẫu: {total_samples}")
print(f"  Số mẫu Real: {real_count}")
print(f"  Số mẫu Spoof: {spoof_count}")
print(f"  Chênh lệch mũi-mắt trung bình (mm): Real = {stats['nose_eye_diff']['real']:.2f}, Spoof = {stats['nose_eye_diff']['spoof']:.2f}")
print(f"  Độ lệch chuẩn vùng mặt trung bình (mm): Real = {stats['face_std_dev']['real']:.2f}, Spoof = {stats['face_std_dev']['spoof']:.2f}")

# Tạo thư mục lưu biểu đồ
output_dir = 'plots'
os.makedirs(output_dir, exist_ok=True)

# Định nghĩa ngưỡng
nose_eye_diff_threshold = 10  # mm
face_std_dev_threshold = 20   # mm

# 1. Biểu đồ scatter plot cho Real
plt.figure(figsize=(10, 6))
sns.scatterplot(data=real_data, x='nose_eye_diff', y='face_std_dev', color=colors['real'],
                s=100, alpha=0.7, label='Real')
plt.axvline(x=nose_eye_diff_threshold, color='black', linestyle='--', label='Thresholds')
plt.axhline(y=face_std_dev_threshold, color='black', linestyle='--')
plt.xlabel('Nose-Eye Difference (mm)')
plt.ylabel('Face Std Dev (mm)')
plt.title('Scatter Plot of Depth Metrics (Real)')
plt.legend(title='Label')
plt.tight_layout()
plt.savefig(os.path.join(output_dir, 'scatter_plot_real.png'), dpi=300)
plt.close()

# 2. Biểu đồ scatter plot cho Spoof
plt.figure(figsize=(10, 6))
sns.scatterplot(data=spoof_data, x='nose_eye_diff', y='face_std_dev', color=colors['spoof'],
                s=100, alpha=0.7, label='Spoof')
plt.axvline(x=nose_eye_diff_threshold, color='black', linestyle='--', label='Thresholds')
plt.axhline(y=face_std_dev_threshold, color='black', linestyle='--')
plt.xlabel('Nose-Eye Difference (mm)')
plt.ylabel('Face Std Dev (mm)')
plt.title('Scatter Plot of Depth Metrics (Spoof)')
plt.legend(title='Label')
plt.tight_layout()
plt.savefig(os.path.join(output_dir, 'scatter_plot_spoof.png'), dpi=300)
plt.close()

# Thông báo hoàn tất
print("\nCác biểu đồ đã được lưu dưới dạng file PNG.")